/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "zmk-helpers/helper.h"
#include "includes/cornix54.h"

// tap windows for ctl alt and gui

#define HM_TAPPING_TERM 250
#define HM_TAPPING_REPEAT 210

// quick tapping for shift

#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 70
#define BASE 0
#define WIN 1
#define LOWER 2
#define RAISE 3
#define ADJUST 4
#define NAVI   5
#define NUM    6
#define DEBUG  7

// https://github.com/urob/zmk-config/tree/main#timeless-homerow-mods

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH1 LH0 RH0 RH1
#define KEYS_T LH1 LH0 RH0 RH1
#define ZMK_POINTING_DEFAULT_SCRL_VAL 15

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    // Activate ADJUST layer by pressing raise and lower

    behaviors {
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };

        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.

        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            //flavor = "balanced";

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;

            // for quick tapping; shift+~

            hold-trigger-on-release;
        };

        /*
         * Non-Positional Homerow Mods
         * Used for &mm_grescm_gui behavior on left hand.
         *
         * Usage: &hm LSHFT T
         * Tap: T
         * Tap-Tap-Hold: Repeat T
         * Hold: LSHIFT
         */

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };

        lt: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            flavor = "hold-preferred";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };

        mt160_behavior: mt160_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "MT160_BEHAVIOR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            quick-tap-ms = <100>;
            flavor = "tap-preferred";
        };

        mt170_behavior: mt170_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "MT170_BEHAVIOR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <100>;
            flavor = "tap-preferred";
        };

        mt220_behavior: mt220_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "MT220_BEHAVIOR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <100>;
            flavor = "tap-preferred";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            layers = <0>;
        };

        eisuu {
            bindings = <&kp LEFT_GUI>;
            key-positions = <16 15>;
            layers = <0>;
        };

        kana {
            bindings = <&kp RIGHT_GUI>;
            key-positions = <19 20>;
            layers = <0>;
        };

        memo {
            bindings = <&kp RA(RS(RC(RG(ENTER))))>;
            key-positions = <35 36>;
            layers = <0>;
        };

        cmd_enter {
            bindings = <&kp RG(ENTER)>;
            key-positions = <33 34>;
            layers = <0>;
        };

        raycast {
            bindings = <&kp LA(SPACE)>;
            key-positions = <28 27>;
            layers = <0>;
        };

        home {
            bindings = <&kp HOME>;
            key-positions = <19 20>;
            layers = <1>;
        };

        end {
            bindings = <&kp RS(END)>;
            key-positions = <21 22>;
            layers = <1>;
        };

        eisuu2 {
            bindings = <&kp LEFT_GUI>;
            key-positions = <15 14>;
            layers = <0>;
        };

        kana2 {
            bindings = <&kp RIGHT_GUI>;
            key-positions = <20 21>;
            layers = <0>;
        };
    };

    macros {
        M11: M11 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI &kp PERIOD &kp PERIOD &kp PERIOD &kp RIGHT_GUI>;
            label = "M11";
        };

        M9: M9 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_GUI &kp DOUBLE_QUOTES &kp DOUBLE_QUOTES &kp ENTER &kp LEFT_ARROW>;
            label = "M9";
        };

        M10: M10 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_GUI &kp SQT &kp SQT &kp ENTER &kp LEFT>;
            label = "M10";
        };

        M1: M1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_GUI &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp ENTER &kp LEFT>;
            label = "M1";
        };

        M2: M2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_GUI &kp LEFT_BRACKET &kp RIGHT_BRACKET &kp ENTER &kp LEFT>;
            label = "M2";
        };

        M6: M6 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "M6";
        };

        M5: M5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI &kp LESS_THAN &kp GREATER_THAN &kp LEFT>;
            label = "M5";
        };

        M4: M4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI &kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT>;
            label = "M4";
        };

        M3: M3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI &kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "M3";
        };

        M7: M7 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI &kp DOUBLE_QUOTES &kp DOUBLE_QUOTES &kp LEFT>;
            label = "M7";
        };

        M8: M8 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI &kp SQT &kp SQT &kp LEFT>;
            label = "M8";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Base";

            // ------------------------------------------------------------------------------------------------------------
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&mt160_behavior LEFT_ALT LG(V)  &mt160_behavior CAPS LG(C)  &kp L                           &kp U                     &kp COMMA                   &kp PERIOD                                     &kp K          &kp W                        &kp R                          &kp Y                            &mt160_behavior K_MENU RS(RG(P))  &mt220_behavior RIGHT_CONTROL RG(RS(V))
&kp Q                           &kp E                       &mt170_behavior LEFT_CONTROL I  &mt170_behavior LSHIFT A  &mt170_behavior LEFT_GUI O  &kp MINUS                                      &kp G          &mt170_behavior RIGHT_GUI T  &mt170_behavior RIGHT_SHIFT N  &mt170_behavior RIGHT_CONTROL S  &kp H                             &kp P
&kp SEMICOLON                   &kp Z                       &kp X                           &kp C                     &kp V                       &kp LEFT_GUI   &kp C_PLAY_PAUSE  &kp RC(DOWN)  &kp RIGHT_GUI  &kp D                        &kp M                          &kp J                            &kp B                             &kp F
&kp LG(Z)                       &kp LG(X)                   &kp LG(A)                       &lt 2 TAB                 &lt 1 SPACE                 &lt 3 LA(TAB)                                  &lt 3 DELETE   &lt 1 ENTER                  &lt 2 BACKSPACE                &none                            &kp RC(ENTER)                     &kp RC(SPACE)
            >;

            sensor-bindings =
                <&inc_dec_kp C_NEXT C_PREV>,
                <&inc_dec_kp RC(RIGHT) RC(LEFT_ARROW)>;
        };

        Mix_layer {
            display-name = "Mix";

            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
            // |       | INS  | PSCR | GUI   |       |      |                | PGUP |      |   ^   |      |       |       |
            // |       | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
            // |       | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
            //                |      |       |       |      |      |  |      |      |      |       |      |

            bindings = <
&kp ASTERISK  &kp PLUS      &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp LA(Y)                                         &M9        &kp EXCLAMATION  &kp QUESTION    &M11          &M1            &M2
&kp SLASH     &kp MINUS     &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp LS(NUMBER_4)                                  &M10       &kp LEFT         &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT      &kp TILDE
&kp COMMA     &kp PERIOD    &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans            &kp C_PLAY_PAUSE  &kp LC(DOWN)  &trans     &kp PERCENT      &kp AMPERSAND   &kp AT_SIGN   &kp LG(HASH)   &kp SLASH
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2     &kp EQUAL        &kp KP_NUMBER_0  &kp SPACE                                         &kp ENTER  &kp BACKSLASH    &kp PIPE        &none         &kp RC(ENTER)  &kt RC(SPACE)
            >;

            sensor-bindings =
                <&inc_dec_kp C_NEXT C_PREV>,
                <&inc_dec_kp LC(RIGHT) LC(LEFT)>;
        };

        Symbol_layer {
            display-name = "Symbols";

            // TODO: Some binds are waiting for shifted keycode support.
            // -------------------------------
            // |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |  F12  |
            // |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
            // |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&kp ASTERISK   &M6                &M5        &kp GRAVE        &kp COMMA    &kp PERIOD                                      &kp CARET  &kp EXCLAMATION  &kp QUESTION     &M4          &M3       &kp PIPE
&kp TILDE      &kp EQUAL          &kp PLUS   &kp MINUS        &kp LG(X)    &kp UNDERSCORE                                  &kp RG(A)  &kp LEFT_BRACE   &kp RIGHT_BRACE  &M7          &M8       &kp BACKSLASH
&kp SEMICOLON  &kp LS(SEMICOLON)  &kp LG(D)  &kp LG(W)        &kp LG(T)    &trans          &kp C_PLAY_PAUSE  &kp RC(DOWN)  &trans     &kp PERCENT      &kp AMPERSAND    &kp AT_SIGN  &kp HASH  &kp SLASH
&trans         &trans             &trans     &kp LC(LS(TAB))  &kp LC(TAB)  &trans                                          &trans     &kp RC(S)        &kp RC(K)        &trans       &trans    &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_NEXT C_PREV>,
                <&inc_dec_kp RC(RIGHT) RC(LEFT_ARROW)>;
        };

        Navi_layer {
            display-name = "Navi";
            bindings = <
&kp LS(LG(NUMBER_4))       &kp LS(LG(NUMBER_3))   &kp LC(LS(NUMBER_7))  &kp LC(LS(NUMBER_8))  &kp LC(LS(NUMBER_9))  &kp C_VOLUME_UP                                    &msc SCRL_DOWN  &mkp MB4        &mmv MOVE_UP     &mkp MB5         &kp RG(T)      &kp RG(W)
&kp LS(LA(LC(LG(SPACE))))  &kp LS(LC(LA(LG(T))))  &kp LC(LS(NUMBER_4))  &kp LC(LS(N5))        &kp LC(LS(NUMBER_6))  &kp C_VOLUME_DOWN                                  &msc SCRL_UP    &mmv MOVE_LEFT  &mmv MOVE_DOWN   &mmv MOVE_RIGHT  &kp RG(L)      &kp RS(RG(T))
&kp LG(Z)                  &kp LG(X)              &kp LC(LS(NUMBER_1))  &kp LC(LS(NUMBER_2))  &kp LC(LS(NUMBER_3))  &trans             &kp C_PLAY_PAUSE  &kp RC(DOWN)  &trans          &msc SCRL_LEFT  &msc SCRL_RIGHT  &kp RC(LEFT)     &kp RC(RIGHT)  &kp RG(R)
&trans                     &trans                 &trans                &kp C_PREV            &kp C_NEXT            &kp C_PLAY_PAUSE                                   &mkp LCLK       &mkp RCLK       &mkp MCLK        &trans           &trans         &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_NEXT C_PREV>,
                <&inc_dec_kp RC(RIGHT) RC(LEFT)>;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
